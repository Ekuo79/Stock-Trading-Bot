import yfinance as yf
import alpaca_trade_api as tradeapi
import pandas as pd
import numpy as np
import pandas_datareader.data as web
import pandas_ta as ta
from datetime import date
import schedule
import time
import datetime

def runCode():
  #set up alpaca account
  API_KEY = "PKNVNYOE6NDXHRP3M98H"
  SECRET_KEY = "Md9Le3zNJDOegYa3jgEofbEeebNlLDLlt3j7OuUJ"
  api = tradeapi.REST(API_KEY, SECRET_KEY, base_url='https://paper-api.alpaca.markets')
  account = api.get_account()
  positions = api.list_positions()
  positionSymbols = []
  for positionS in positions:
    positionSymbols.append(positionS.symbol)
  
  for position in positionSymbols:
    print(position)
  
  
  #watchlist
  stocks = ['AMD', 'ADBE', 'ABNB', 'ALGN', 'AMZN', 'AEP', 'ADI', 'ANSS', 'AAPL', 'AMAT', 'ASML', 'TEAM', 'ADSK', 'ATVI', 'ADP', 'AZN', 'BKR', 'BIIB', 'BKNG', 'AVGO', 'CDNS', 'CHTR', 'CPRT', 'CSGP', 'CRWD', 'CTAS', 'CSCO', 'CMCSA', 'COST', 'CSX', 'CTSH', 'DDOG', 'DXCM', 'FANG', 'DLTR', 'EA', 'EBAY', 'ENPH', 'EXC', 'FAST', 'GFS', 'META', 'FISV', 'FTNT', 'GILD', 'GOOG', 'GOOGL', 'HON', 'ILMN', 'INTC', 'INTU', 'ISRG', 'MRVL', 'IDXX', 'JD', 'KDP', 'KLAC', 'KHC', 'LRCX', 'LCID', 'LULU', 'MELI', 'MAR', 'MCHP', 'MDLZ', 'MRNA', 'MNST', 'MSFT', 'MU', 'NFLX', 'NVDA', 'NXPI', 'ODFL', 'ORLY', 'PCAR', 'PANW', 'PAYX', 'PDD', 'PYPL', 'PEP', 'QCOM', 'REGN', 'RIVN', 'ROST', 'SIRI', 'SGEN', 'SBUX', 'SNPS', 'TSLA', 'TXN', 'TMUS', 'WBA', 'WBD', 'WDAY', 'XEL', 'ZM', 'ZS']
  
  for symbol in stocks:
    if symbol in positionSymbols:
      position = True
      print(f'position in {symbol}')
    else:
      position = False
    print()
    print(symbol)
    yf.pdr_override()
    start_date = date(2023,3,10)
    end_date = date.today()
  
    def getData(stocks = symbol, start= start_date, end = end_date):
      data = web.get_data_yahoo(stocks, start= start, end= end)
      return data
  
    #price of stock currently
    stock = yf.Ticker(symbol)
    price = stock.info.get('currentPrice')
    
    data = getData(symbol)
    
    data.loc[date.today()] = [price,price,price,price,price,price]
    
    macd = ta.macd(data['Close'])
    data = pd.concat([data, macd], axis=1).reindex(data.index)
  
    def MACD_Strategy(df, risk):
      MACD_Buy=[]
      MACD_Sell=[]
      position=False
    
      for i in range(0, len(df)):
          if df['MACD_12_26_9'][i] > df['MACDs_12_26_9'][i]:
              MACD_Sell.append(-1)
              if position == False:
                  MACD_Buy.append(df['Adj Close'][i])
                  position = True
              else:
                      MACD_Buy.append(-1)
          elif df['MACD_12_26_9'][i] < df['MACDs_12_26_9'][i]:
              MACD_Buy.append(-1)
              if position == True:
                  MACD_Sell.append(df['Adj Close'][i])
                  position = False
              else:
                  MACD_Sell.append(-1)
          elif position == True and df['Adj Close'][i] < MACD_Buy[-1] * (1 - risk):
              MACD_Sell.append(df["Adj Close"][i])
              MACD_Buy.append(-1)
              position = False
          elif position == True and df['Adj Close'][i] < df['Adj Close'][i - 1] * (1 - risk):
              MACD_Sell.append(df["Adj Close"][i])
              MACD_Buy.append(-1)
              position = False
          else:
              MACD_Buy.append(-1)
              MACD_Sell.append(-1)
    
      data['MACD_Buy_Signal_price'] = MACD_Buy
      data['MACD_Sell_Signal_price'] = MACD_Sell
  
    MACD_strategy = MACD_Strategy(data, 0.025)
  
    #with pd.option_context('display.max_rows', None,'display.max_columns',None,'display.precision', 3):
    #  print(data)
  
    if (data['MACD_Buy_Signal_price'][len(data) - 1]) != -1 and position == False:
      api = tradeapi.REST(API_KEY, SECRET_KEY, base_url='https://paper-api.alpaca.markets')
      account = api.get_account()
      moneyAmount = float(account.equity) // 10
      quantity = moneyAmount // price
      api.submit_order(
          symbol=symbol,
          qty=quantity,
          side='buy',
          type='market',
          time_in_force='gtc'
      )
      print(f'Bought {quantity} shares of {symbol} at {price}')
      
    if (data['MACD_Sell_Signal_price'][len(data) - 1]) != -1 and position == True:
      tradePosition = api.get_position(symbol)
      qty = tradePosition.qty
      api.submit_order(
          symbol=symbol,
          qty=qty,
          side='sell',
          type='market',
          time_in_force='gtc'
      )
      print(f'Sold {qty} shares of {symbol} at {price}')
    
    if position == True:
      trade = api.get_position(symbol)
    
      # Retrieve the purchase price and quantity from the stock trade details
      purchase_price = float(trade.avg_entry_price)
      quantity = float(trade.qty)
    
      # Calculate the difference and percent gain or loss
      difference = (price - purchase_price) * quantity
      percent_gain_loss = (difference / (purchase_price * quantity)) * 100
    
      print(percent_gain_loss)
    
      if percent_gain_loss >= 3.0:
          api.submit_order(
          symbol=symbol,
          qty=quantity,
          side='sell',
          type='market',
          time_in_force='gtc'
          )
          print(f'Sold {quantity} shares of {symbol} for {percent_gain_loss} gain')
        
      if percent_gain_loss <= -1.5:
          api.submit_order(
          symbol=symbol,
          qty=quantity,
          side='sell',
          type='market',
          time_in_force='gtc'
          )
          print(f'Sold {quantity} shares of {symbol} for {percent_gain_loss} loss')

schedule.every().day.at("09:15").do(runCode)
schedule.every(15).minutes.do(runCode)

# Keep the script running so that scheduled tasks can be executed on weekdays
while True:
    # Get the current time and day of the week
    now = datetime.datetime.now()
    day_of_week = now.weekday()  # 0 is Monday, 1 is Tuesday, ..., 6 is Sunday

    # Stop the loop if the time is past 4:00 PM or if it's a weekend
    if now.hour >= 16 or day_of_week >= 5:
        break

    # Check if any scheduled tasks need to be executed
    schedule.run_pending()

    # Wait for one second before checking again
    time.sleep(300)
    print('checked')
